// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String          @unique
  password         String
  gender           String
  profilePicture   String?
  bio              String?
  posts            Posts[]
  comments         Comments[]
  likes            Likes[]
  followers        Followers[]     @relation("UserFollowers")
  following        Followers[]     @relation("UserFollowing")
  friends          Friends[]       @relation("UserFriends")
  friendOf         Friends[]       @relation("UserFriendsFriend")
  Friends          Friends[]
  Groups           Groups[]
  GroupMembers     GroupMembers[]
  GroupPosts       GroupPosts[]
  Notifications    Notifications[]
  Messages         Messages[]
  sentMessages     Messages[]      @relation("MessageSender")
  receivedMessages Messages[]      @relation("MessageReceiver")
}

model Posts {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime   @default(now())
  author    Users      @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  comments  Comments[]
  likes     Likes[]
}

model Comments {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  createdAt    DateTime    @default(now())
  author       Users       @relation(fields: [authorId], references: [id])
  authorId     String      @db.ObjectId
  post         Posts       @relation(fields: [postId], references: [id])
  postId       String      @db.ObjectId
  GroupPosts   GroupPosts? @relation(fields: [groupPostsId], references: [id])
  groupPostsId String?     @db.ObjectId
}

model Likes {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  user         Users       @relation(fields: [userId], references: [id])
  userId       String      @db.ObjectId
  post         Posts       @relation(fields: [postId], references: [id])
  postId       String      @db.ObjectId
  GroupPosts   GroupPosts? @relation(fields: [groupPostsId], references: [id])
  groupPostsId String?     @db.ObjectId
}

model Followers {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    Users  @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   Users  @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Friends {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users    @relation("UserFriends", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  friend    Users    @relation("UserFriendsFriend", fields: [friendId], references: [id])
  friendId  String   @db.ObjectId
  createdAt DateTime @default(now())
  Users     Users?   @relation(fields: [usersId], references: [id])
  usersId   String?  @db.ObjectId
}

model Groups {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime       @default(now())
  owner       Users          @relation(fields: [ownerId], references: [id])
  ownerId     String         @db.ObjectId
  members     GroupMembers[]
  posts       GroupPosts[]
  Messages    Messages[]
}

model GroupMembers {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  group    Groups   @relation(fields: [groupId], references: [id])
  groupId  String   @db.ObjectId
  user     Users    @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  role     String // 'admin', 'member'
  joinedAt DateTime @default(now())
}

model GroupPosts {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime   @default(now())
  group     Groups     @relation(fields: [groupId], references: [id])
  groupId   String     @db.ObjectId
  author    Users      @relation(fields: [authorId], references: [id])
  authorId  String     @db.ObjectId
  comments  Comments[]
  likes     Likes[]
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String // 'like', 'comment', 'follow', 'friend_request'
  message   String
  read      Boolean  @default(false) // trạng thái thông báo đã đọc/chưa đọc
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Messages {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  sender     Users    @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   Users?   @relation("MessageReceiver", fields: [receiverId], references: [id]) // cá nhân
  receiverId String?  @db.ObjectId
  group      Groups?  @relation(fields: [groupId], references: [id]) // nhóm chat
  groupId    String?  @db.ObjectId
  sentAt     DateTime @default(now())
  Users      Users?   @relation(fields: [usersId], references: [id])
  usersId    String?  @db.ObjectId
}
