// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  password         String
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  followers        Follower[]     @relation("UserFollowers")
  following        Follower[]     @relation("UserFollowing")
  friends          Friend[]       @relation("UserFriends")
  friendOf         Friend[]       @relation("UserFriendsFriend")
  groups           Group[]
  groupMembers     GroupMember[]
  groupPosts       GroupPost[]
  notifications    Notification[]
  messages         Message[]
  sentMessages     Message[]      @relation("MessageSender")
  receivedMessages Message[]      @relation("MessageReceiver")
  actionTickets    ActionTicket[]
  profile          Profile?
}

model Profile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  userId         String  @unique @db.ObjectId
  name           String
  gender         String
  profilePicture String?
  bio            String?
  user           User    @relation(fields: [userId], references: [id])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime   @default(now())
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  post        Post       @relation(fields: [postId], references: [id])
  postId      String     @db.ObjectId
  groupPost   GroupPost? @relation(fields: [groupPostId], references: [id])
  groupPostId String?    @db.ObjectId
}

model Like {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  post        Post       @relation(fields: [postId], references: [id])
  postId      String     @db.ObjectId
  groupPost   GroupPost? @relation(fields: [groupPostId], references: [id])
  groupPostId String?    @db.ObjectId
}

model Follower {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}

model Friend {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  friend    User     @relation("UserFriendsFriend", fields: [friendId], references: [id])
  friendId  String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Group {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime      @default(now())
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String        @db.ObjectId
  members     GroupMember[]
  posts       GroupPost[]
  messages    Message[]
}

model GroupMember {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  role     String // 'admin', 'member'
  joinedAt DateTime @default(now())
}

model GroupPost {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String // 'like', 'comment', 'follow', 'friend_request'
  message   String
  read      Boolean  @default(false) // trạng thái thông báo đã đọc/chưa đọc
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [id]) // cá nhân
  receiverId String?  @db.ObjectId
  group      Group?   @relation(fields: [groupId], references: [id]) // nhóm chat
  groupId    String?  @db.ObjectId
  sentAt     DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId
}

model VerificationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String
  expiresAt DateTime
}

model ActionTicket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  ticket    String
  action    String
  expiresAt DateTime
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String
  expiredAt DateTime
}
